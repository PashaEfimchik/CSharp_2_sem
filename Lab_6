using System;
using System.Collections.Generic;
using System.Collections;

public class GenericList<T> : IEnumerable<T>
{
    protected Node head;
    protected Node current = null;
    protected class Node
    {
        public Node next;
        private T data;
        public Node(T t)
        {
            next = null;
            data = t;
        }
        public Node Next
        {
            get { return next; }
            set { next = value; }
        }
        public T Data
        {
            get { return data; }
            set { data = value; }
        }
    }
    public GenericList()
    {
        head = null;
    }
    public void AddHead(T t)
    {
        Node n = new Node(t);
        n.Next = head;
        head = n;
    }
    public IEnumerator<T> GetEnumerator()
    {
        Node current = head;
        while (current != null)
        {
            yield return current.Data;
            current = current.Next;
        }
    }
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }
}
public class SortedList<T> : GenericList<T> where T : IComparable<T>
{
    public void BubbleSort()
    {
        if (null == head || null == head.Next)
        {
            return;
        }
        bool trade;
        do
        {
            Node previous = null;
            Node current = head;
            trade = false;
            while (current.next != null)
            {
                if (current.Data.CompareTo(current.next.Data) > 0)
                {
                    Node tmp = current.next;
                    current.next = current.next.next;
                    tmp.next = current;

                    if (previous == null)
                    {
                        head = tmp;
                    }
                    else
                    {
                        previous.next = tmp;
                    }
                    previous = tmp;
                    trade = true;
                }
                else
                {
                    previous = current;
                    current = current.next;
                }
            }
        } while (trade);
    }
}
public class Person : IComparable<Person>
{
    string name;
    int age;
    public Person(string s, int i)
    {
        name = s;
        age = i;
    }
    public int CompareTo(Person p)
    {
        return age - p.age;
    }
    public override string ToString()
    {
        return name + " - " + age;
    }
    public bool Equals(Person p)
    {
        return (this.age == p.age);
    }
}
class Program
{
    static void Main()
    {
        SortedList<Person> list = new SortedList<Person>();
        string[] names = new string[]
                {
           "Владислав",
            "Григорий",
            "Марк",
            "Константин",
            "Александр",
            "Алексей",
            "Виктор",
                };
        int[] ages = new int[] { 34, 26, 15, 42, 17, 29, 55};
        
        for (int x = 0; x < 7; x++)
        {
            list.AddHead(new Person(names[x], ages[x]));
        }
        System.Console.WriteLine("Неотсортированный список: \n");
        foreach (Person p in list)
        {
            System.Console.WriteLine(p.ToString());
        }
        list.BubbleSort();
        System.Console.WriteLine("\n\nОтсортированный список: \n");
        foreach (Person p in list)
        {
            System.Console.WriteLine(p.ToString());
        }
    }
}
